// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////
//use concat and reduce
function flatten(arr) {
  return arr.reduce((acum, item) => 
  {
    return acum.concat(item);
  })
}
//Param: It takes a value, a test function, an update function, and a body function. 
// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function loop(val, test, step, body) {
  //base case
  if(!test(val)) {
    return val;
  }
  //code

  //recursion
  body(val);
  return loop(step(val), test, step, body);
}

// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////
//every item in array has to pass the test for the function to return true

function every(arr, test) {
  for(let i = 0; i < arr.length; i++) {
    console.log(!test(arr))
    if(!test(arr[i])) {
      return false;
    }
  }
  return true;
}
console.log(every([1, 3, 5], n => n < 10), 'should be true');
// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function dominantDirection() {

}

// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
};
